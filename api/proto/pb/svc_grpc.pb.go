// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RestartServiceClient is the client API for RestartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestartServiceClient interface {
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (RestartService_SendMessageClient, error)
}

type restartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestartServiceClient(cc grpc.ClientConnInterface) RestartServiceClient {
	return &restartServiceClient{cc}
}

func (c *restartServiceClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (RestartService_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RestartService_serviceDesc.Streams[0], "/restart.service.RestartService/SendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &restartServiceSendMessageClient{stream}
	return x, nil
}

type RestartService_SendMessageClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type restartServiceSendMessageClient struct {
	grpc.ClientStream
}

func (x *restartServiceSendMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *restartServiceSendMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RestartServiceServer is the server API for RestartService service.
// All implementations must embed UnimplementedRestartServiceServer
// for forward compatibility
type RestartServiceServer interface {
	SendMessage(RestartService_SendMessageServer) error
	mustEmbedUnimplementedRestartServiceServer()
}

// UnimplementedRestartServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRestartServiceServer struct {
}

func (UnimplementedRestartServiceServer) SendMessage(RestartService_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedRestartServiceServer) mustEmbedUnimplementedRestartServiceServer() {}

// UnsafeRestartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestartServiceServer will
// result in compilation errors.
type UnsafeRestartServiceServer interface {
	mustEmbedUnimplementedRestartServiceServer()
}

func RegisterRestartServiceServer(s *grpc.Server, srv RestartServiceServer) {
	s.RegisterService(&_RestartService_serviceDesc, srv)
}

func _RestartService_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RestartServiceServer).SendMessage(&restartServiceSendMessageServer{stream})
}

type RestartService_SendMessageServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type restartServiceSendMessageServer struct {
	grpc.ServerStream
}

func (x *restartServiceSendMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *restartServiceSendMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RestartService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "restart.service.RestartService",
	HandlerType: (*RestartServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _RestartService_SendMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/svc.proto",
}
